"use strict";(self.webpackChunkosbuild_website_ng=self.webpackChunkosbuild_website_ng||[]).push([[3037],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=i,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2400:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={},a="Uploading an image to to a bucket in a Generic S3 server",s={unversionedId:"image-builder-on-premises/uploading-to-generic-s3",id:"image-builder-on-premises/uploading-to-generic-s3",title:"Uploading an image to to a bucket in a Generic S3 server",description:"osbuild-composer provides the users with a convenient way to upload images, of all sorts, directly to a bucket in a Generic S3 server right after the image is built.",source:"@site/docs/image-builder-on-premises/uploading-to-generic-s3.md",sourceDirName:"image-builder-on-premises",slug:"/image-builder-on-premises/uploading-to-generic-s3",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-generic-s3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/image-builder-on-premises/uploading-to-generic-s3.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Uploading an image to GCP",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-gcp"},next:{title:"Uploading an image to OCI",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-oci"}},l={},c=[],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"uploading-an-image-to-to-a-bucket-in-a-generic-s3-server"},"Uploading an image to to a bucket in a Generic S3 server"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"osbuild-composer")," provides the users with a convenient way to upload images, of all sorts, directly to a bucket in a Generic S3 server right after the image is built."),(0,i.kt)("p",null,"Using a text editor of your choice, create a configuration file with the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'provider = "generic.s3"\n\n[settings]\nendpoint = "S3_SERVER_ENDPOINT"\naccessKeyID = "S3_ACCESS_KEY_ID"\nsecretAccessKey = "S3_SECRET_ACCESS_KEY"\nbucket = "S3_BUCKET"\nregion = "S3_REGION"\nkey = "OBJECT_KEY"\n')),(0,i.kt)("p",null,"There are several considerations when filling values in this file:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AWS_REGION")," must still be set (e.g. to us-east-1) even if it has no meaning in your S3 server"),(0,i.kt)("li",{parentName:"ul"},"If your server is using HTTPS with a certificate signed by your own CA, you can either pass the CA bundle by setting the field ",(0,i.kt)("inlineCode",{parentName:"li"},"ca_bundle"),", pointing it to the CA's public certificate, or skip SSL verification by setting ",(0,i.kt)("inlineCode",{parentName:"li"},"skip_ssl_verification")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"))),(0,i.kt)("p",null,"Once everything is configured, you can trigger a compose as usual with additional image name and cloud provider profile:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ sudo composer-cli compose start base-image-with-tmux qcow2 IMAGE_KEY generic-s3-config.toml\n")))}d.isMDXComponent=!0}}]);