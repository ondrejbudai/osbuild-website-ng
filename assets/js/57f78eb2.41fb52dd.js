"use strict";(self.webpackChunkosbuild_website_ng=self.webpackChunkosbuild_website_ng||[]).push([[5405],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),u=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(r),m=n,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return r?o.createElement(h,l(l({ref:t},c),{},{components:r})):o.createElement(h,l({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[d]="string"==typeof e?e:n,l[1]=a;for(var u=2;u<i;u++)l[u]=r[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4669:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var o=r(7462),n=(r(7294),r(3905));const i={},l="Workflow",a={unversionedId:"developer-guide/workflow",id:"developer-guide/workflow",title:"Workflow",description:"Git Workflow",source:"@site/docs/developer-guide/workflow.md",sourceDirName:"developer-guide",slug:"/developer-guide/workflow",permalink:"/osbuild-website-ng/docs/developer-guide/workflow",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/developer-guide/workflow.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RPM Repository Snapshots",permalink:"/osbuild-website-ng/docs/developer-guide/testing-strategy/rpmrepo"}},s={},u=[{value:"Git Workflow",id:"git-workflow",level:2},{value:"Commits",id:"commits",level:3},{value:"Pull requests",id:"pull-requests",level:3},{value:"Branches",id:"branches",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"workflow"},"Workflow"),(0,n.kt)("h2",{id:"git-workflow"},"Git Workflow"),(0,n.kt)("h3",{id:"commits"},"Commits"),(0,n.kt)("p",null,"Commits should be easy to read."),(0,n.kt)("p",null,"The commit message should explain clearly what it's trying to do and why. The following format is\ncommon but not required:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"<module>: Topic of the commit\n\nBody of the commit, describing the changes in more detail.\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"<module>")," should point to the area of the codebase (for instance ",(0,n.kt)("inlineCode",{parentName:"p"},"tests")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"tools"),"). The topic\nshould summarize what the commit is doing."),(0,n.kt)("p",null,"GitHub truncates the first line if it's longer than 65 characters, which is something to keep in\nmind as well."),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"Fixes #issue-number")," can be added to automatically link and close a related issue if it exists."),(0,n.kt)("h3",{id:"pull-requests"},"Pull requests"),(0,n.kt)("p",null,"A pull request should be one or more commits which form a coherent unit, it can be\nrebased/rewritten/force-pushed until it's fit for merging."),(0,n.kt)("p",null,"How the PR developed, and the iterations it went through, should not be visible in the git\nhistory. The end result counts: a certain amount of commits, each one forming a logical unit of\nchanges. Avoid 'fix-up' commits which tweak previous commits in the PR."),(0,n.kt)("p",null,"Pull requests should be opened from a developer's own fork to avoid random branches on the origin."),(0,n.kt)("p",null,"Each pull request should be reviewed, and the CI should pass."),(0,n.kt)("p",null,"Once a pull request is ready to be merged, it should be merged via the ",(0,n.kt)("inlineCode",{parentName:"p"},"Rebase and merge")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"Squash\nand merge")," option. This avoids merge commits on the main branch."),(0,n.kt)("h3",{id:"branches"},"Branches"),(0,n.kt)("p",null,"Force-pushing to, or rebasing the main branch (or other release branches) is not allowed. Avoid\ndirectly pushing (fast-forward) to those branches as well. Commits can always be reverted by opening\na new pull request."))}p.isMDXComponent=!0}}]);