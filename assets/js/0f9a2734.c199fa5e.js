"use strict";(self.webpackChunkosbuild_website_ng=self.webpackChunkosbuild_website_ng||[]).push([[2422],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={},a="Uploading an image to an AWS S3 Bucket",s={unversionedId:"image-builder-on-premises/uploading-to-aws-s3",id:"image-builder-on-premises/uploading-to-aws-s3",title:"Uploading an image to an AWS S3 Bucket",description:"osbuild-composer provides the users with a convenient way to upload images, of all sorts, directly to an AWS S3 bucket right after the image is built.",source:"@site/docs/image-builder-on-premises/uploading-to-aws-s3.md",sourceDirName:"image-builder-on-premises",slug:"/image-builder-on-premises/uploading-to-aws-s3",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-aws-s3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/image-builder-on-premises/uploading-to-aws-s3.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Third-party Repositories",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/repository-customizations"},next:{title:"Uploading an image to AWS",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-aws"}},l={},u=[],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"uploading-an-image-to-an-aws-s3-bucket"},"Uploading an image to an AWS S3 Bucket"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"osbuild-composer")," provides the users with a convenient way to upload images, of all sorts, directly to an AWS S3 bucket right after the image is built."),(0,o.kt)("p",null,"Using a text editor of your choice, create a configuration file with the following content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'provider = "aws.s3"\n\n[settings]\naccessKeyID = "AWS_ACCESS_KEY_ID"\nsecretAccessKey = "AWS_SECRET_ACCESS_KEY"\nbucket = "AWS_BUCKET"\nregion = "AWS_REGION"\nkey = "OBJECT_KEY"\n')),(0,o.kt)("p",null,"There are several considerations when filling values in this file:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AWS_BUCKET")," must be in the ",(0,o.kt)("inlineCode",{parentName:"li"},"AWS_REGION"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If your authentication method requires you to also specify a session token, you can put it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"settings")," section of the configuration file in a field named ",(0,o.kt)("inlineCode",{parentName:"p"},"sessionToken"),".")),(0,o.kt)("p",null,"Once everything is configured, you can trigger a compose as usual with additional image name and cloud provider profile:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo composer-cli compose start base-image-with-tmux qcow2 IMAGE_KEY aws-s3-config.toml\n")))}d.isMDXComponent=!0}}]);