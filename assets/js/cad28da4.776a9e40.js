"use strict";(self.webpackChunkosbuild_website_ng=self.webpackChunkosbuild_website_ng||[]).push([[3189],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={},o="Building a RHEL for Edge Installer",l={unversionedId:"image-builder-on-premises/edge-container+installer",id:"image-builder-on-premises/edge-container+installer",title:"Building a RHEL for Edge Installer",description:'The following describes how to build a boot ISO which installs an OSTree-based system using the "RHEL for Edge Container" in combination with the "RHEL for Edge Installer" image types. The workflow has the same result as the Building OSTree Image guide with the new image types automating some of the steps.',source:"@site/docs/image-builder-on-premises/edge-container+installer.md",sourceDirName:"image-builder-on-premises",slug:"/image-builder-on-premises/edge-container+installer",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/edge-container+installer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/image-builder-on-premises/edge-container+installer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Container registry credentials",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/container-auth"},next:{title:"Image Builder on premises",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/"}},s={},d=[{value:"Process overview",id:"process-overview",level:2},{value:"Detailed workflow",id:"detailed-workflow",level:2},{value:"Build the container and serve the commit",id:"build-the-container-and-serve-the-commit",level:3},{value:"Build the installer",id:"build-the-installer",level:3}],p={toc:d},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"building-a-rhel-for-edge-installer"},"Building a RHEL for Edge Installer"),(0,r.kt)("p",null,'The following describes how to build a boot ISO which installs an OSTree-based system using the "RHEL for Edge Container" in combination with the "RHEL for Edge Installer" image types. The workflow has the same result as the ',(0,r.kt)("a",{parentName:"p",href:"/osbuild-website-ng/docs/image-builder-on-premises/building-ostree-images"},"Building OSTree Image")," guide with the new image types automating some of the steps."),(0,r.kt)("p",null,"Note that there are some small differences in this procedure between RHEL 8.4 and RHEL 8.5:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The names of the image types have changed. In 8.4, the image types were prefixed by ",(0,r.kt)("inlineCode",{parentName:"li"},"rhel-"),". This prefix was removed in 8.5.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The old names ",(0,r.kt)("inlineCode",{parentName:"li"},"rhel-edge-container")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"rhel-edge-installer")," still work in RHEL 8.5 as aliases to the new names, however these names are considered deprecated and may be removed completely in future versions."))),(0,r.kt)("li",{parentName:"ul"},"The internal port for the container has changed from 80 in RHEL 8.4 to 8080 in RHEL 8.5.")),(0,r.kt)("h2",{id:"process-overview"},"Process overview"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create and load a blueprint with customizations."),(0,r.kt)("li",{parentName:"ol"},"Build an ",(0,r.kt)("inlineCode",{parentName:"li"},"edge-container")," (RHEL 8.5) or ",(0,r.kt)("inlineCode",{parentName:"li"},"rhel-edge-container")," (RHEL 8.4) image."),(0,r.kt)("li",{parentName:"ol"},"Load image in podman and start the container."),(0,r.kt)("li",{parentName:"ol"},"Create and load an empty blueprint."),(0,r.kt)("li",{parentName:"ol"},"Build an ",(0,r.kt)("inlineCode",{parentName:"li"},"edge-installer")," (RHEL 8.5) or ",(0,r.kt)("inlineCode",{parentName:"li"},"rhel-edge-installer")," (RHEL 8.4) image, pointing the ",(0,r.kt)("inlineCode",{parentName:"li"},"ostree-url")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"http://10.0.2.2:8080/repo/")," and setting the ",(0,r.kt)("inlineCode",{parentName:"li"},"ostree-ref")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"rhel/edge/demo"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"edge-container")," image type creates an OSTree commit and embeds it into an OCI container with a web server. When the container is started, the web server serves the commit as an OSTree repository."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"edge-intaller")," image type pulls the commit from the running container and creates an installable boot ISO with a kickstart file configured to use the embedded OSTree commit."),(0,r.kt)("h2",{id:"detailed-workflow"},"Detailed workflow"),(0,r.kt)("h3",{id:"build-the-container-and-serve-the-commit"},"Build the container and serve the commit"),(0,r.kt)("p",null,"Start by creating a blueprint for the commit. The content below is an example and can be modified to fit your needs. For this guide, we will name the file ",(0,r.kt)("inlineCode",{parentName:"p"},"example.toml"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'name = "example"\ndescription = "RHEL for Edge Installer example"\nversion = "0.0.3"\n\n[[packages]]\nname = "vim-enhanced"\nversion = "*"\n\n[[packages]]\nname = "tmux"\nversion = "*"\n\n[customizations]\n\n[[customizations.user]]\nname = "user"\ndescription = "Example User"\npassword = "$6$uvdfeuHQYM6kUaea$fvvzyu.Z.u89TVCB2tq8UEc52XDFGnAqCo75BX3zu8OzIbS.EKMo/Saammb151sLrdzmlESnpNEPrJ7h5b0c6/"\ngroups = ["wheel"]\n')),(0,r.kt)("p",null,"Now push the blueprint to osbuild-composer using ",(0,r.kt)("inlineCode",{parentName:"p"},"composer-cli"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ composer-cli blueprints push example.toml\n")),(0,r.kt)("p",null,"And start the container build:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ composer-cli compose start-ostree --ref "rhel/edge/example" example edge-container\nCompose 8e8014f8-4d15-441a-a26d-9ed7fc89e23a added to the queue\n')),(0,r.kt)("p",null,"The value for ",(0,r.kt)("inlineCode",{parentName:"p"},"--ref")," can be changed but must begin with an alphanumeric character and contain only alphanumeric characters, ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"."),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: In RHEL 8.4, the image type was called ",(0,r.kt)("inlineCode",{parentName:"em"},"rhel-edge-container"),". It has been renamed to ",(0,r.kt)("inlineCode",{parentName:"em"},"edge-container")," in 8.5 onwards.")),(0,r.kt)("p",null,"Monitor the build status using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ composer-cli compose status\n")),(0,r.kt)("p",null,"When the compose is FINISHED, download the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ composer-cli compose image 8e8014f8-4d15-441a-a26d-9ed7fc89e23a\n8e8014f8-4d15-441a-a26d-9ed7fc89e23a-rhel84-container.tar: 670.45 MB\n")),(0,r.kt)("p",null,"Load the container into registry:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ cat 8e8014f8-4d15-441a-a26d-9ed7fc89e23a-rhel84-container.tar | podman load\nGetting image source signatures\nCopying blob 82934cd3e69d done\nCopying config d11911c3dc done\nWriting manifest to image destination\nStoring signatures\nLoaded image(s): @d11911c3dc4bee46cabd52b91c87f48b8a7d450fadc8cfbeb69e2de98b413521\n")),(0,r.kt)("p",null,"Tag the image for convenience:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman tag d11911c3dc4bee46cabd52b91c87f48b8a7d450fadc8cfbeb69e2de98b413521 localhost/edge-example\n")),(0,r.kt)("p",null,"Start the container (note the different internal port numbers between the two versions)"),(0,r.kt)("p",null,"For RHEL 8.4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman run --rm -d -p 8080:80 --name ostree-repo localhost/edge-example\n")),(0,r.kt)("p",null,"For RHEL 8.5+:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman run --rm -d -p 8080:8080 --name ostree-repo localhost/edge-example\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: The ",(0,r.kt)("inlineCode",{parentName:"em"},"-d")," option detaches the container and leaves it running in the background. You can also remove the option to keep the container attached to the terminal.")),(0,r.kt)("h3",{id:"build-the-installer"},"Build the installer"),(0,r.kt)("p",null,"Start by creating a simple blueprint for the installer. The blueprint must not have any customizations or packages; only a name, and optionally a version and a description. Add the content below to a file and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"empty.toml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'name = "empty"\ndescription = "Empty blueprint"\nversion = "0.0.1"\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"edge-installer")," image type does not support customizations or package selection, so the build will fail if any are specified."),(0,r.kt)("p",null,"Push the blueprint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ composer-cli blueprints push empty.toml\n")),(0,r.kt)("p",null,"Start the build:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ composer-cli compose start-ostree --ref "rhel/edge/example" --url http://10.0.2.2:8080/repo/ empty edge-installer\nCompose 09d98a67-a401-4613-9a5b-b93f8a6e695f added to the queue\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: In RHEL 8.4, the image type was called ",(0,r.kt)("inlineCode",{parentName:"em"},"rhel-edge-installer"),". It has been renamed to ",(0,r.kt)("inlineCode",{parentName:"em"},"edge-installer")," in 8.5 onwards.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--ref")," argument must match the one from the ",(0,r.kt)("inlineCode",{parentName:"p"},"rhel-edge-container")," compose.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"--url")," in this case is IP address of the container. This tutorial uses ",(0,r.kt)("inlineCode",{parentName:"p"},"qemu")," to boot the virtual machine and ",(0,r.kt)("inlineCode",{parentName:"p"},"10.0.2.2")," is an address which you can use to reach the host system from the guest: ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.qemu.org/Documentation/Networking#User_Networking_.28SLIRP.29"},"User Networking"),"."),(0,r.kt)("p",null,"Monitor the build status using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ composer-cli compose status\n")),(0,r.kt)("p",null,"When the compose is FINISHED, download the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ composer-cli compose image 09d98a67-a401-4613-9a5b-b93f8a6e695f\n 09d98a67-a401-4613-9a5b-b93f8a6e695f-rhel84-boot.iso: 1422.61 MB\n")),(0,r.kt)("p",null,'The downloaded image can then booted to begin the installation. If you used the blueprint in this guide, use the username "user" and password "password42" to login.'))}c.isMDXComponent=!0}}]);