"use strict";(self.webpackChunkosbuild_website_ng=self.webpackChunkosbuild_website_ng||[]).push([[8675],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(g,a(a({ref:t},u),{},{components:n})):r.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9325:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={},a="Uploading an image to OCI",l={unversionedId:"image-builder-on-premises/uploading-to-oci",id:"image-builder-on-premises/uploading-to-oci",title:"Uploading an image to OCI",description:"osbuild-composer provides the users with a convenient way to upload images directly to OCI right after the image is built.",source:"@site/docs/image-builder-on-premises/uploading-to-oci.md",sourceDirName:"image-builder-on-premises",slug:"/image-builder-on-premises/uploading-to-oci",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-oci",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/image-builder-on-premises/uploading-to-oci.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Uploading an image to to a bucket in a Generic S3 server",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-generic-s3"},next:{title:"Uploading a container image to a registry",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-registry"}},s={},c=[],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"uploading-an-image-to-oci"},"Uploading an image to OCI"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"osbuild-composer")," provides the users with a convenient way to upload images directly to OCI right after the image is built.\nSee ",(0,o.kt)("a",{parentName:"p",href:"https://docs.oracle.com/en-us/iaas/Content/Compute/Tasks/managingcustomimages.htm"},"Managing Custom Images")," in OCI documentation (includes permissions details)."),(0,o.kt)("p",null,"Now, you are ready to upload your first image to OCI. Using a text editor of your choice, create a configuration file with the following content: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'provider = "oci"\n\n[settings]\nuser = "OCI_CLI_USER"\ntenancy = "OCI_CLI_TENANCY"\nfingerprint = "OCI_CLI_FINGERPRINT"\nregion = "OCI_CLI_REGION"\nbucket = "OCI_BUCKET"\nnamespace = "OCI_NAMESPACE"\ncompartment = "OCI_COMPARTMENT"\nprivate_key = \'\'\'\n...\n\'\'\'\n')),(0,o.kt)("p",null,"There are several considerations when filling values in this file:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"OCI_BUCKET")," must be in the ",(0,o.kt)("inlineCode",{parentName:"li"},"OCI_REGION")," and must exist before the upload")),(0,o.kt)("p",null,"Once everything is configured, you can trigger a compose as usual with additional image name and cloud provider profile:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo composer-cli compose start BLUEPRINT_NAME oci IMAGE_KEY oci-config.toml\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"IMAGE_KEY")," will be the name of your new OCI image once uploaded."))}m.isMDXComponent=!0}}]);