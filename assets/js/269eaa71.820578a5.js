"use strict";(self.webpackChunkosbuild_website_ng=self.webpackChunkosbuild_website_ng||[]).push([[8846],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=i,b=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(b,o(o({ref:t},c),{},{components:r})):n.createElement(b,o({ref:t},c))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},739:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const a={},o="Basic concepts",s={unversionedId:"image-builder-on-premises/basic-concepts",id:"image-builder-on-premises/basic-concepts",title:"Basic concepts",description:"osbuild-composer works with a concept of blueprints. A blueprint is a description of the final image and its customizations. A customization can be:",source:"@site/docs/image-builder-on-premises/basic-concepts.md",sourceDirName:"image-builder-on-premises",slug:"/image-builder-on-premises/basic-concepts",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/basic-concepts",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/image-builder-on-premises/basic-concepts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Image Builder on Premises",permalink:"/osbuild-website-ng/docs/category/image-builder-on-premises"},next:{title:"Blueprint Reference",permalink:"/osbuild-website-ng/docs/image-builder-on-premises/blueprint-reference"}},p={},l=[{value:"Example blueprint",id:"example-blueprint",level:2},{value:"Image types",id:"image-types",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-concepts"},"Basic concepts"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"osbuild-composer")," works with a concept of ",(0,i.kt)("strong",{parentName:"p"},"blueprints"),". A blueprint is a description of the final ",(0,i.kt)("strong",{parentName:"p"},"image")," and its ",(0,i.kt)("strong",{parentName:"p"},"customizations"),". A ",(0,i.kt)("strong",{parentName:"p"},"customization")," can be:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an additional RPM package"),(0,i.kt)("li",{parentName:"ul"},"enabled service"),(0,i.kt)("li",{parentName:"ul"},"custom kernel command line parameter, and many others. See ",(0,i.kt)("a",{parentName:"li",href:"https://www.osbuild.org/guides/blueprint-reference/blueprint-reference.html#blueprint-reference"},"Blueprint")," reference for more details. ")),(0,i.kt)("p",null,"An ",(0,i.kt)("strong",{parentName:"p"},"image")," is defined by its blueprint and ",(0,i.kt)("strong",{parentName:"p"},"image type"),", which is for example ",(0,i.kt)("inlineCode",{parentName:"p"},"qcow2")," (QEMU Copy On Write disk image) or ",(0,i.kt)("inlineCode",{parentName:"p"},"AMI")," (Amazon Machine Image)."),(0,i.kt)("p",null,"Finally, ",(0,i.kt)("inlineCode",{parentName:"p"},"osbuild-composer")," also supports ",(0,i.kt)("strong",{parentName:"p"},"upload targets"),", which are cloud providers where an image can be stored after it is built. See the ",(0,i.kt)("a",{parentName:"p",href:"/osbuild-website-ng/docs/image-builder-on-premises/uploading-to-cloud"},"Uploading cloud images")," section for more details."),(0,i.kt)("h2",{id:"example-blueprint"},"Example blueprint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'name = "base-image-with-tmux"\ndescription = "A base system with tmux"\nversion = "0.0.1"\n\n[[packages]]\nname = "tmux"\nversion = "*"\n')),(0,i.kt)("p",null,"The blueprint is in ",(0,i.kt)("a",{parentName:"p",href:"https://toml.io/en/"},"TOML format"),"."),(0,i.kt)("h2",{id:"image-types"},"Image types"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"osbuild-composer")," supports various types of output images. To see all supported types, run this command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ composer-cli compose types\n")))}m.isMDXComponent=!0}}]);