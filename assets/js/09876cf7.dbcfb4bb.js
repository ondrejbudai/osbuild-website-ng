"use strict";(self.webpackChunkosbuild_website_ng=self.webpackChunkosbuild_website_ng||[]).push([[4888],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var i=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,o=function(e,t){if(null==e)return{};var r,i,o={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=i.createContext({}),c=function(e){var t=i.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||n;return r?i.createElement(b,a(a({ref:t},u),{},{components:r})):i.createElement(b,a({ref:t},u))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,a=new Array(n);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<n;c++)a[c]=r[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2183:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var i=r(7462),o=(r(7294),r(3905));const n={},a="osbuild-composer",l={unversionedId:"developer-guide/osbuild-composer",id:"developer-guide/osbuild-composer",title:"osbuild-composer",description:"It is a web service for building OS images. The core of osbuild-composer, which is common to all APIs, is osbuild manifests generation a job queuing. If an operating system is to be supported by osbuild-composer, it needs the manifest generation code in internal/distro directory. So far, we only focus on RPM based distributions, such as Fedora and RHEL. The queuing mechanism is under heavy development at the moment.",source:"@site/docs/developer-guide/osbuild-composer.md",sourceDirName:"developer-guide",slug:"/developer-guide/osbuild-composer",permalink:"/osbuild-website-ng/docs/developer-guide/osbuild-composer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/developer-guide/osbuild-composer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Latest RPM builds",permalink:"/osbuild-website-ng/docs/developer-guide/latest-rpm-builds"},next:{title:"osbuild",permalink:"/osbuild-website-ng/docs/developer-guide/osbuild"}},s={},c=[{value:"Interfacing with dnf package manager",id:"interfacing-with-dnf-package-manager",level:2},{value:"Local API - Weldr",id:"local-api---weldr",level:2},{value:"Remote API - Cloud API",id:"remote-api---cloud-api",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,i.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"osbuild-composer"},"osbuild-composer"),(0,o.kt)("p",null,"It is a web service for building OS images. The core of ",(0,o.kt)("inlineCode",{parentName:"p"},"osbuild-composer"),", which is common to all APIs, is osbuild manifests generation a job queuing. If an operating system is to be supported by ",(0,o.kt)("inlineCode",{parentName:"p"},"osbuild-composer"),", it needs the manifest generation code in ",(0,o.kt)("inlineCode",{parentName:"p"},"internal/distro")," directory. So far, we only focus on RPM based distributions, such as Fedora and RHEL. The queuing mechanism is under heavy development at the moment."),(0,o.kt)("h2",{id:"interfacing-with-dnf-package-manager"},"Interfacing with dnf package manager"),(0,o.kt)("p",null,"We use our custom wrapper for ",(0,o.kt)("inlineCode",{parentName:"p"},"dnf"),", which we call simply ",(0,o.kt)("inlineCode",{parentName:"p"},"dnf-json"),", because its interface goes like this:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Stdin - takes  a JSON object"),(0,o.kt)("li",{parentName:"ul"},"Stdout - returns a JSON object"),(0,o.kt)("li",{parentName:"ul"},"Return code is used ",(0,o.kt)("strong",{parentName:"li"},"only")," for ",(0,o.kt)("inlineCode",{parentName:"li"},"dnf-json")," internal errors, not for errors in the operation specified on the input. Those errors are reported in the returned JSON object.")),(0,o.kt)("h2",{id:"local-api---weldr"},"Local API - Weldr"),(0,o.kt)("p",null,"This API comes from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Lorax-composer project"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"osbuild-composer")," was created as a drop-in replacement for Lorax which influenced many design decisions. It uses Unix-Domain socket, so it is meant for local usage only. There are two clients:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"composer-cli / ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/osbuild/weldr-client"},"weldr-client")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/osbuild/cockpit-composer"},"cockpit-composer")," (branded as Image Builder in the Cockpit console)")),(0,o.kt)("p",null,"Activate this API by invoking ",(0,o.kt)("inlineCode",{parentName:"p"},"systemctl start osbuild-composer.socket"),". Systemd will create a socket at ",(0,o.kt)("inlineCode",{parentName:"p"},"/run/weldr/api.socket"),"."),(0,o.kt)("h2",{id:"remote-api---cloud-api"},"Remote API - Cloud API"),(0,o.kt)("p",null,"This is the ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/image-builder-composer/v2/")," API endpoint. There are currently two clients, which are integrating with ",(0,o.kt)("inlineCode",{parentName:"p"},"osbuild-composer")," using this API:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/osbuild/image-builder"},"image-builder"),", described in more detail in the ",(0,o.kt)("a",{parentName:"li",href:"/osbuild-website-ng/docs/image-builder-service/architecture"},"Image Builder service architecture")," document."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/osbuild/koji-osbuild"},"koji-osbuild")," plugin, which integrates ",(0,o.kt)("inlineCode",{parentName:"li"},"osbuild-composer")," with the ",(0,o.kt)("a",{parentName:"li",href:"https://koji.build/"},"Koji")," build system.")))}p.isMDXComponent=!0}}]);